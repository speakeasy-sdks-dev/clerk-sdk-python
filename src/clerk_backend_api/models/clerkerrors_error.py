"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .clerkerror import ClerkError
from clerk_backend_api import utils
from clerk_backend_api.types import BaseModel
from typing import List, Optional
from typing_extensions import TypedDict


class ClerkErrorsMetaTypedDict(TypedDict):
    pass


class ClerkErrorsMeta(BaseModel):
    pass


class ClerkErrorsErrorData(BaseModel):
    errors: List[ClerkError]

    meta: Optional[ClerkErrorsMeta] = None


class ClerkErrorsError(Exception):
    r"""Request was not successful"""

    data: ClerkErrorsErrorData

    def __init__(self, data: ClerkErrorsErrorData):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, ClerkErrorsErrorData)


class ClerkErrorsError1Data(BaseModel):
    errors: List[ClerkError]

    meta: Optional[ClerkErrorsMeta] = None


class ClerkErrorsError1(Exception):
    r"""Request was not successful"""

    data: ClerkErrorsError1Data

    def __init__(self, data: ClerkErrorsError1Data):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, ClerkErrorsError1Data)


class ClerkErrorsError2Data(BaseModel):
    errors: List[ClerkError]

    meta: Optional[ClerkErrorsMeta] = None


class ClerkErrorsError2(Exception):
    r"""Request was not successful"""

    data: ClerkErrorsError2Data

    def __init__(self, data: ClerkErrorsError2Data):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, ClerkErrorsError2Data)


class ClerkErrorsError3Data(BaseModel):
    errors: List[ClerkError]

    meta: Optional[ClerkErrorsMeta] = None


class ClerkErrorsError3(Exception):
    r"""Request was not successful"""

    data: ClerkErrorsError3Data

    def __init__(self, data: ClerkErrorsError3Data):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, ClerkErrorsError3Data)


class ClerkErrorsError4Data(BaseModel):
    errors: List[ClerkError]

    meta: Optional[ClerkErrorsMeta] = None


class ClerkErrorsError4(Exception):
    r"""Request was not successful"""

    data: ClerkErrorsError4Data

    def __init__(self, data: ClerkErrorsError4Data):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, ClerkErrorsError4Data)


class ClerkErrorsError5Data(BaseModel):
    errors: List[ClerkError]

    meta: Optional[ClerkErrorsMeta] = None


class ClerkErrorsError5(Exception):
    r"""Request was not successful"""

    data: ClerkErrorsError5Data

    def __init__(self, data: ClerkErrorsError5Data):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, ClerkErrorsError5Data)


class ClerkErrorsError6Data(BaseModel):
    errors: List[ClerkError]

    meta: Optional[ClerkErrorsMeta] = None


class ClerkErrorsError6(Exception):
    r"""Request was not successful"""

    data: ClerkErrorsError6Data

    def __init__(self, data: ClerkErrorsError6Data):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, ClerkErrorsError6Data)


class ClerkErrorsError7Data(BaseModel):
    errors: List[ClerkError]

    meta: Optional[ClerkErrorsMeta] = None


class ClerkErrorsError7(Exception):
    r"""Request was not successful"""

    data: ClerkErrorsError7Data

    def __init__(self, data: ClerkErrorsError7Data):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, ClerkErrorsError7Data)


class ClerkErrorsError8Data(BaseModel):
    errors: List[ClerkError]

    meta: Optional[ClerkErrorsMeta] = None


class ClerkErrorsError8(Exception):
    r"""Request was not successful"""

    data: ClerkErrorsError8Data

    def __init__(self, data: ClerkErrorsError8Data):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, ClerkErrorsError8Data)


class ClerkErrorsError9Data(BaseModel):
    errors: List[ClerkError]

    meta: Optional[ClerkErrorsMeta] = None


class ClerkErrorsError9(Exception):
    r"""Request was not successful"""

    data: ClerkErrorsError9Data

    def __init__(self, data: ClerkErrorsError9Data):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, ClerkErrorsError9Data)


class ClerkErrorsError10Data(BaseModel):
    errors: List[ClerkError]

    meta: Optional[ClerkErrorsMeta] = None


class ClerkErrorsError10(Exception):
    r"""Request was not successful"""

    data: ClerkErrorsError10Data

    def __init__(self, data: ClerkErrorsError10Data):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, ClerkErrorsError10Data)


class ClerkErrorsError11Data(BaseModel):
    errors: List[ClerkError]

    meta: Optional[ClerkErrorsMeta] = None


class ClerkErrorsError11(Exception):
    r"""Request was not successful"""

    data: ClerkErrorsError11Data

    def __init__(self, data: ClerkErrorsError11Data):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, ClerkErrorsError11Data)


class ClerkErrorsError12Data(BaseModel):
    errors: List[ClerkError]

    meta: Optional[ClerkErrorsMeta] = None


class ClerkErrorsError12(Exception):
    r"""Request was not successful"""

    data: ClerkErrorsError12Data

    def __init__(self, data: ClerkErrorsError12Data):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, ClerkErrorsError12Data)


class ClerkErrorsError13Data(BaseModel):
    errors: List[ClerkError]

    meta: Optional[ClerkErrorsMeta] = None


class ClerkErrorsError13(Exception):
    r"""Request was not successful"""

    data: ClerkErrorsError13Data

    def __init__(self, data: ClerkErrorsError13Data):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, ClerkErrorsError13Data)


class ClerkErrorsError14Data(BaseModel):
    errors: List[ClerkError]

    meta: Optional[ClerkErrorsMeta] = None


class ClerkErrorsError14(Exception):
    r"""Request was not successful"""

    data: ClerkErrorsError14Data

    def __init__(self, data: ClerkErrorsError14Data):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, ClerkErrorsError14Data)


class ClerkErrorsError15Data(BaseModel):
    errors: List[ClerkError]

    meta: Optional[ClerkErrorsMeta] = None


class ClerkErrorsError15(Exception):
    r"""Authentication invalid"""

    data: ClerkErrorsError15Data

    def __init__(self, data: ClerkErrorsError15Data):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, ClerkErrorsError15Data)


class ClerkErrorsError16Data(BaseModel):
    errors: List[ClerkError]

    meta: Optional[ClerkErrorsMeta] = None


class ClerkErrorsError16(Exception):
    r"""Request was not successful"""

    data: ClerkErrorsError16Data

    def __init__(self, data: ClerkErrorsError16Data):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, ClerkErrorsError16Data)


class ClerkErrorsError17Data(BaseModel):
    errors: List[ClerkError]

    meta: Optional[ClerkErrorsMeta] = None


class ClerkErrorsError17(Exception):
    r"""Request was not successful"""

    data: ClerkErrorsError17Data

    def __init__(self, data: ClerkErrorsError17Data):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, ClerkErrorsError17Data)


class ClerkErrorsError18Data(BaseModel):
    errors: List[ClerkError]

    meta: Optional[ClerkErrorsMeta] = None


class ClerkErrorsError18(Exception):
    r"""Request was not successful"""

    data: ClerkErrorsError18Data

    def __init__(self, data: ClerkErrorsError18Data):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, ClerkErrorsError18Data)


class ClerkErrorsError19Data(BaseModel):
    errors: List[ClerkError]

    meta: Optional[ClerkErrorsMeta] = None


class ClerkErrorsError19(Exception):
    r"""Request was not successful"""

    data: ClerkErrorsError19Data

    def __init__(self, data: ClerkErrorsError19Data):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, ClerkErrorsError19Data)


class ClerkErrorsError20Data(BaseModel):
    errors: List[ClerkError]

    meta: Optional[ClerkErrorsMeta] = None


class ClerkErrorsError20(Exception):
    r"""Request was not successful"""

    data: ClerkErrorsError20Data

    def __init__(self, data: ClerkErrorsError20Data):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, ClerkErrorsError20Data)


class ClerkErrorsError21Data(BaseModel):
    errors: List[ClerkError]

    meta: Optional[ClerkErrorsMeta] = None


class ClerkErrorsError21(Exception):
    r"""Request was not successful"""

    data: ClerkErrorsError21Data

    def __init__(self, data: ClerkErrorsError21Data):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, ClerkErrorsError21Data)


class ClerkErrorsError22Data(BaseModel):
    errors: List[ClerkError]

    meta: Optional[ClerkErrorsMeta] = None


class ClerkErrorsError22(Exception):
    r"""Request was not successful"""

    data: ClerkErrorsError22Data

    def __init__(self, data: ClerkErrorsError22Data):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, ClerkErrorsError22Data)


class ClerkErrorsError23Data(BaseModel):
    errors: List[ClerkError]

    meta: Optional[ClerkErrorsMeta] = None


class ClerkErrorsError23(Exception):
    r"""Request was not successful"""

    data: ClerkErrorsError23Data

    def __init__(self, data: ClerkErrorsError23Data):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, ClerkErrorsError23Data)


class ClerkErrorsError24Data(BaseModel):
    errors: List[ClerkError]

    meta: Optional[ClerkErrorsMeta] = None


class ClerkErrorsError24(Exception):
    r"""Invalid request parameters"""

    data: ClerkErrorsError24Data

    def __init__(self, data: ClerkErrorsError24Data):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, ClerkErrorsError24Data)


class ClerkErrorsError25Data(BaseModel):
    errors: List[ClerkError]

    meta: Optional[ClerkErrorsMeta] = None


class ClerkErrorsError25(Exception):
    r"""Request was not successful"""

    data: ClerkErrorsError25Data

    def __init__(self, data: ClerkErrorsError25Data):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, ClerkErrorsError25Data)


class ClerkErrorsError26Data(BaseModel):
    errors: List[ClerkError]

    meta: Optional[ClerkErrorsMeta] = None


class ClerkErrorsError26(Exception):
    r"""Request was not successful"""

    data: ClerkErrorsError26Data

    def __init__(self, data: ClerkErrorsError26Data):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, ClerkErrorsError26Data)


class ClerkErrorsError27Data(BaseModel):
    errors: List[ClerkError]

    meta: Optional[ClerkErrorsMeta] = None


class ClerkErrorsError27(Exception):
    r"""Request was not successful"""

    data: ClerkErrorsError27Data

    def __init__(self, data: ClerkErrorsError27Data):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, ClerkErrorsError27Data)


class ClerkErrorsError28Data(BaseModel):
    errors: List[ClerkError]

    meta: Optional[ClerkErrorsMeta] = None


class ClerkErrorsError28(Exception):
    r"""Payment required"""

    data: ClerkErrorsError28Data

    def __init__(self, data: ClerkErrorsError28Data):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, ClerkErrorsError28Data)


class ClerkErrorsError29Data(BaseModel):
    errors: List[ClerkError]

    meta: Optional[ClerkErrorsMeta] = None


class ClerkErrorsError29(Exception):
    r"""Payment required"""

    data: ClerkErrorsError29Data

    def __init__(self, data: ClerkErrorsError29Data):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, ClerkErrorsError29Data)


class ClerkErrorsError30Data(BaseModel):
    errors: List[ClerkError]

    meta: Optional[ClerkErrorsMeta] = None


class ClerkErrorsError30(Exception):
    r"""Request was not successful"""

    data: ClerkErrorsError30Data

    def __init__(self, data: ClerkErrorsError30Data):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, ClerkErrorsError30Data)


class ClerkErrorsError31Data(BaseModel):
    errors: List[ClerkError]

    meta: Optional[ClerkErrorsMeta] = None


class ClerkErrorsError31(Exception):
    r"""Request was not successful"""

    data: ClerkErrorsError31Data

    def __init__(self, data: ClerkErrorsError31Data):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, ClerkErrorsError31Data)


class ClerkErrorsError32Data(BaseModel):
    errors: List[ClerkError]

    meta: Optional[ClerkErrorsMeta] = None


class ClerkErrorsError32(Exception):
    r"""Invalid request parameters"""

    data: ClerkErrorsError32Data

    def __init__(self, data: ClerkErrorsError32Data):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, ClerkErrorsError32Data)


class ClerkErrorsError33Data(BaseModel):
    errors: List[ClerkError]

    meta: Optional[ClerkErrorsMeta] = None


class ClerkErrorsError33(Exception):
    r"""Request was not successful"""

    data: ClerkErrorsError33Data

    def __init__(self, data: ClerkErrorsError33Data):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, ClerkErrorsError33Data)


class ClerkErrorsError34Data(BaseModel):
    errors: List[ClerkError]

    meta: Optional[ClerkErrorsMeta] = None


class ClerkErrorsError34(Exception):
    r"""Request was not successful"""

    data: ClerkErrorsError34Data

    def __init__(self, data: ClerkErrorsError34Data):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, ClerkErrorsError34Data)


class ClerkErrorsError35Data(BaseModel):
    errors: List[ClerkError]

    meta: Optional[ClerkErrorsMeta] = None


class ClerkErrorsError35(Exception):
    r"""Request was not successful"""

    data: ClerkErrorsError35Data

    def __init__(self, data: ClerkErrorsError35Data):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, ClerkErrorsError35Data)


class ClerkErrorsError36Data(BaseModel):
    errors: List[ClerkError]

    meta: Optional[ClerkErrorsMeta] = None


class ClerkErrorsError36(Exception):
    r"""Authentication invalid"""

    data: ClerkErrorsError36Data

    def __init__(self, data: ClerkErrorsError36Data):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, ClerkErrorsError36Data)


class ClerkErrorsError37Data(BaseModel):
    errors: List[ClerkError]

    meta: Optional[ClerkErrorsMeta] = None


class ClerkErrorsError37(Exception):
    r"""Request was not successful"""

    data: ClerkErrorsError37Data

    def __init__(self, data: ClerkErrorsError37Data):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, ClerkErrorsError37Data)


class ClerkErrorsError38Data(BaseModel):
    errors: List[ClerkError]

    meta: Optional[ClerkErrorsMeta] = None


class ClerkErrorsError38(Exception):
    r"""Payment required"""

    data: ClerkErrorsError38Data

    def __init__(self, data: ClerkErrorsError38Data):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, ClerkErrorsError38Data)


class ClerkErrorsError39Data(BaseModel):
    errors: List[ClerkError]

    meta: Optional[ClerkErrorsMeta] = None


class ClerkErrorsError39(Exception):
    r"""Authentication invalid"""

    data: ClerkErrorsError39Data

    def __init__(self, data: ClerkErrorsError39Data):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, ClerkErrorsError39Data)


class ClerkErrorsError40Data(BaseModel):
    errors: List[ClerkError]

    meta: Optional[ClerkErrorsMeta] = None


class ClerkErrorsError40(Exception):
    r"""Request was not successful"""

    data: ClerkErrorsError40Data

    def __init__(self, data: ClerkErrorsError40Data):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, ClerkErrorsError40Data)


class ClerkErrorsError41Data(BaseModel):
    errors: List[ClerkError]

    meta: Optional[ClerkErrorsMeta] = None


class ClerkErrorsError41(Exception):
    r"""Payment required"""

    data: ClerkErrorsError41Data

    def __init__(self, data: ClerkErrorsError41Data):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, ClerkErrorsError41Data)


class ClerkErrorsError42Data(BaseModel):
    errors: List[ClerkError]

    meta: Optional[ClerkErrorsMeta] = None


class ClerkErrorsError42(Exception):
    r"""Payment required"""

    data: ClerkErrorsError42Data

    def __init__(self, data: ClerkErrorsError42Data):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, ClerkErrorsError42Data)


class ClerkErrorsError43Data(BaseModel):
    errors: List[ClerkError]

    meta: Optional[ClerkErrorsMeta] = None


class ClerkErrorsError43(Exception):
    r"""Request was not successful"""

    data: ClerkErrorsError43Data

    def __init__(self, data: ClerkErrorsError43Data):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, ClerkErrorsError43Data)


class ClerkErrorsError50Data(BaseModel):
    errors: List[ClerkError]

    meta: Optional[ClerkErrorsMeta] = None


class ClerkErrorsError50(Exception):
    r"""Request was not successful"""

    data: ClerkErrorsError50Data

    def __init__(self, data: ClerkErrorsError50Data):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, ClerkErrorsError50Data)


class ClerkErrorsError44Data(BaseModel):
    errors: List[ClerkError]

    meta: Optional[ClerkErrorsMeta] = None


class ClerkErrorsError44(Exception):
    r"""Request was not successful"""

    data: ClerkErrorsError44Data

    def __init__(self, data: ClerkErrorsError44Data):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, ClerkErrorsError44Data)


class ClerkErrorsError45Data(BaseModel):
    errors: List[ClerkError]

    meta: Optional[ClerkErrorsMeta] = None


class ClerkErrorsError45(Exception):
    r"""Request was not successful"""

    data: ClerkErrorsError45Data

    def __init__(self, data: ClerkErrorsError45Data):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, ClerkErrorsError45Data)


class ClerkErrorsError46Data(BaseModel):
    errors: List[ClerkError]

    meta: Optional[ClerkErrorsMeta] = None


class ClerkErrorsError46(Exception):
    r"""Request was not successful"""

    data: ClerkErrorsError46Data

    def __init__(self, data: ClerkErrorsError46Data):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, ClerkErrorsError46Data)


class ClerkErrorsError47Data(BaseModel):
    errors: List[ClerkError]

    meta: Optional[ClerkErrorsMeta] = None


class ClerkErrorsError47(Exception):
    r"""Request was not successful"""

    data: ClerkErrorsError47Data

    def __init__(self, data: ClerkErrorsError47Data):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, ClerkErrorsError47Data)


class ClerkErrorsError48Data(BaseModel):
    errors: List[ClerkError]

    meta: Optional[ClerkErrorsMeta] = None


class ClerkErrorsError48(Exception):
    r"""Request was not successful"""

    data: ClerkErrorsError48Data

    def __init__(self, data: ClerkErrorsError48Data):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, ClerkErrorsError48Data)


class ClerkErrorsError49Data(BaseModel):
    errors: List[ClerkError]

    meta: Optional[ClerkErrorsMeta] = None


class ClerkErrorsError49(Exception):
    r"""Invalid request parameters"""

    data: ClerkErrorsError49Data

    def __init__(self, data: ClerkErrorsError49Data):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, ClerkErrorsError49Data)


class ClerkErrorsError51Data(BaseModel):
    errors: List[ClerkError]

    meta: Optional[ClerkErrorsMeta] = None


class ClerkErrorsError51(Exception):
    r"""Payment required"""

    data: ClerkErrorsError51Data

    def __init__(self, data: ClerkErrorsError51Data):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, ClerkErrorsError51Data)


class ClerkErrorsError52Data(BaseModel):
    errors: List[ClerkError]

    meta: Optional[ClerkErrorsMeta] = None


class ClerkErrorsError52(Exception):
    r"""Request was not successful"""

    data: ClerkErrorsError52Data

    def __init__(self, data: ClerkErrorsError52Data):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, ClerkErrorsError52Data)


class ClerkErrorsError53Data(BaseModel):
    errors: List[ClerkError]

    meta: Optional[ClerkErrorsMeta] = None


class ClerkErrorsError53(Exception):
    r"""Request was not successful"""

    data: ClerkErrorsError53Data

    def __init__(self, data: ClerkErrorsError53Data):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, ClerkErrorsError53Data)


class ClerkErrorsError54Data(BaseModel):
    errors: List[ClerkError]

    meta: Optional[ClerkErrorsMeta] = None


class ClerkErrorsError54(Exception):
    r"""Resource not found"""

    data: ClerkErrorsError54Data

    def __init__(self, data: ClerkErrorsError54Data):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, ClerkErrorsError54Data)


class ClerkErrorsError55Data(BaseModel):
    errors: List[ClerkError]

    meta: Optional[ClerkErrorsMeta] = None


class ClerkErrorsError55(Exception):
    r"""Request was not successful"""

    data: ClerkErrorsError55Data

    def __init__(self, data: ClerkErrorsError55Data):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, ClerkErrorsError55Data)


class ClerkErrorsError56Data(BaseModel):
    errors: List[ClerkError]

    meta: Optional[ClerkErrorsMeta] = None


class ClerkErrorsError56(Exception):
    r"""Authorization invalid"""

    data: ClerkErrorsError56Data

    def __init__(self, data: ClerkErrorsError56Data):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, ClerkErrorsError56Data)


class ClerkErrorsError57Data(BaseModel):
    errors: List[ClerkError]

    meta: Optional[ClerkErrorsMeta] = None


class ClerkErrorsError57(Exception):
    r"""Request was not successful"""

    data: ClerkErrorsError57Data

    def __init__(self, data: ClerkErrorsError57Data):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, ClerkErrorsError57Data)


class ClerkErrorsError58Data(BaseModel):
    errors: List[ClerkError]

    meta: Optional[ClerkErrorsMeta] = None


class ClerkErrorsError58(Exception):
    r"""Request was not successful"""

    data: ClerkErrorsError58Data

    def __init__(self, data: ClerkErrorsError58Data):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, ClerkErrorsError58Data)


class ClerkErrorsError59Data(BaseModel):
    errors: List[ClerkError]

    meta: Optional[ClerkErrorsMeta] = None


class ClerkErrorsError59(Exception):
    r"""Authorization invalid"""

    data: ClerkErrorsError59Data

    def __init__(self, data: ClerkErrorsError59Data):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, ClerkErrorsError59Data)


class ClerkErrorsError60Data(BaseModel):
    errors: List[ClerkError]

    meta: Optional[ClerkErrorsMeta] = None


class ClerkErrorsError60(Exception):
    r"""Resource not found"""

    data: ClerkErrorsError60Data

    def __init__(self, data: ClerkErrorsError60Data):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, ClerkErrorsError60Data)


class ClerkErrorsError61Data(BaseModel):
    errors: List[ClerkError]

    meta: Optional[ClerkErrorsMeta] = None


class ClerkErrorsError61(Exception):
    r"""Resource not found"""

    data: ClerkErrorsError61Data

    def __init__(self, data: ClerkErrorsError61Data):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, ClerkErrorsError61Data)


class ClerkErrorsError62Data(BaseModel):
    errors: List[ClerkError]

    meta: Optional[ClerkErrorsMeta] = None


class ClerkErrorsError62(Exception):
    r"""Request was not successful"""

    data: ClerkErrorsError62Data

    def __init__(self, data: ClerkErrorsError62Data):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, ClerkErrorsError62Data)


class ClerkErrorsError63Data(BaseModel):
    errors: List[ClerkError]

    meta: Optional[ClerkErrorsMeta] = None


class ClerkErrorsError63(Exception):
    r"""Resource not found"""

    data: ClerkErrorsError63Data

    def __init__(self, data: ClerkErrorsError63Data):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, ClerkErrorsError63Data)


class ClerkErrorsError64Data(BaseModel):
    errors: List[ClerkError]

    meta: Optional[ClerkErrorsMeta] = None


class ClerkErrorsError64(Exception):
    r"""Request was not successful"""

    data: ClerkErrorsError64Data

    def __init__(self, data: ClerkErrorsError64Data):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, ClerkErrorsError64Data)


class ClerkErrorsError65Data(BaseModel):
    errors: List[ClerkError]

    meta: Optional[ClerkErrorsMeta] = None


class ClerkErrorsError65(Exception):
    r"""Request was not successful"""

    data: ClerkErrorsError65Data

    def __init__(self, data: ClerkErrorsError65Data):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, ClerkErrorsError65Data)


class ClerkErrorsError66Data(BaseModel):
    errors: List[ClerkError]

    meta: Optional[ClerkErrorsMeta] = None


class ClerkErrorsError66(Exception):
    r"""Request was not successful"""

    data: ClerkErrorsError66Data

    def __init__(self, data: ClerkErrorsError66Data):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, ClerkErrorsError66Data)


class ClerkErrorsError67Data(BaseModel):
    errors: List[ClerkError]

    meta: Optional[ClerkErrorsMeta] = None


class ClerkErrorsError67(Exception):
    r"""Request was not successful"""

    data: ClerkErrorsError67Data

    def __init__(self, data: ClerkErrorsError67Data):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, ClerkErrorsError67Data)


class ClerkErrorsError68Data(BaseModel):
    errors: List[ClerkError]

    meta: Optional[ClerkErrorsMeta] = None


class ClerkErrorsError68(Exception):
    r"""Request was not successful"""

    data: ClerkErrorsError68Data

    def __init__(self, data: ClerkErrorsError68Data):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, ClerkErrorsError68Data)


class ClerkErrorsError69Data(BaseModel):
    errors: List[ClerkError]

    meta: Optional[ClerkErrorsMeta] = None


class ClerkErrorsError69(Exception):
    r"""Request was not successful"""

    data: ClerkErrorsError69Data

    def __init__(self, data: ClerkErrorsError69Data):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, ClerkErrorsError69Data)


class ClerkErrorsError70Data(BaseModel):
    errors: List[ClerkError]

    meta: Optional[ClerkErrorsMeta] = None


class ClerkErrorsError70(Exception):
    r"""Authentication invalid"""

    data: ClerkErrorsError70Data

    def __init__(self, data: ClerkErrorsError70Data):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, ClerkErrorsError70Data)


class ClerkErrorsError71Data(BaseModel):
    errors: List[ClerkError]

    meta: Optional[ClerkErrorsMeta] = None


class ClerkErrorsError71(Exception):
    r"""Request was not successful"""

    data: ClerkErrorsError71Data

    def __init__(self, data: ClerkErrorsError71Data):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, ClerkErrorsError71Data)


class ClerkErrorsError72Data(BaseModel):
    errors: List[ClerkError]

    meta: Optional[ClerkErrorsMeta] = None


class ClerkErrorsError72(Exception):
    r"""Request was not successful"""

    data: ClerkErrorsError72Data

    def __init__(self, data: ClerkErrorsError72Data):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, ClerkErrorsError72Data)


class ClerkErrorsError73Data(BaseModel):
    errors: List[ClerkError]

    meta: Optional[ClerkErrorsMeta] = None


class ClerkErrorsError73(Exception):
    r"""Request was not successful"""

    data: ClerkErrorsError73Data

    def __init__(self, data: ClerkErrorsError73Data):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, ClerkErrorsError73Data)


class ClerkErrorsError74Data(BaseModel):
    errors: List[ClerkError]

    meta: Optional[ClerkErrorsMeta] = None


class ClerkErrorsError74(Exception):
    r"""Request was not successful"""

    data: ClerkErrorsError74Data

    def __init__(self, data: ClerkErrorsError74Data):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, ClerkErrorsError74Data)


class ClerkErrorsError75Data(BaseModel):
    errors: List[ClerkError]

    meta: Optional[ClerkErrorsMeta] = None


class ClerkErrorsError75(Exception):
    r"""Request was not successful"""

    data: ClerkErrorsError75Data

    def __init__(self, data: ClerkErrorsError75Data):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, ClerkErrorsError75Data)


class ClerkErrorsError76Data(BaseModel):
    errors: List[ClerkError]

    meta: Optional[ClerkErrorsMeta] = None


class ClerkErrorsError76(Exception):
    r"""Resource not found"""

    data: ClerkErrorsError76Data

    def __init__(self, data: ClerkErrorsError76Data):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, ClerkErrorsError76Data)


class ClerkErrorsError77Data(BaseModel):
    errors: List[ClerkError]

    meta: Optional[ClerkErrorsMeta] = None


class ClerkErrorsError77(Exception):
    r"""Resource not found"""

    data: ClerkErrorsError77Data

    def __init__(self, data: ClerkErrorsError77Data):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, ClerkErrorsError77Data)


class ClerkErrorsError78Data(BaseModel):
    errors: List[ClerkError]

    meta: Optional[ClerkErrorsMeta] = None


class ClerkErrorsError78(Exception):
    r"""Request was not successful"""

    data: ClerkErrorsError78Data

    def __init__(self, data: ClerkErrorsError78Data):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, ClerkErrorsError78Data)


class ClerkErrorsError79Data(BaseModel):
    errors: List[ClerkError]

    meta: Optional[ClerkErrorsMeta] = None


class ClerkErrorsError79(Exception):
    r"""Authorization invalid"""

    data: ClerkErrorsError79Data

    def __init__(self, data: ClerkErrorsError79Data):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, ClerkErrorsError79Data)


class ClerkErrorsError80Data(BaseModel):
    errors: List[ClerkError]

    meta: Optional[ClerkErrorsMeta] = None


class ClerkErrorsError80(Exception):
    r"""Request was not successful"""

    data: ClerkErrorsError80Data

    def __init__(self, data: ClerkErrorsError80Data):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, ClerkErrorsError80Data)


class ClerkErrorsError81Data(BaseModel):
    errors: List[ClerkError]

    meta: Optional[ClerkErrorsMeta] = None


class ClerkErrorsError81(Exception):
    r"""Authorization invalid"""

    data: ClerkErrorsError81Data

    def __init__(self, data: ClerkErrorsError81Data):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, ClerkErrorsError81Data)


class ClerkErrorsError82Data(BaseModel):
    errors: List[ClerkError]

    meta: Optional[ClerkErrorsMeta] = None


class ClerkErrorsError82(Exception):
    r"""Authorization invalid"""

    data: ClerkErrorsError82Data

    def __init__(self, data: ClerkErrorsError82Data):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, ClerkErrorsError82Data)


class ClerkErrorsError83Data(BaseModel):
    errors: List[ClerkError]

    meta: Optional[ClerkErrorsMeta] = None


class ClerkErrorsError83(Exception):
    r"""Authorization invalid"""

    data: ClerkErrorsError83Data

    def __init__(self, data: ClerkErrorsError83Data):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, ClerkErrorsError83Data)


class ClerkErrorsError84Data(BaseModel):
    errors: List[ClerkError]

    meta: Optional[ClerkErrorsMeta] = None


class ClerkErrorsError84(Exception):
    r"""Authorization invalid"""

    data: ClerkErrorsError84Data

    def __init__(self, data: ClerkErrorsError84Data):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, ClerkErrorsError84Data)


class ClerkErrorsError85Data(BaseModel):
    errors: List[ClerkError]

    meta: Optional[ClerkErrorsMeta] = None


class ClerkErrorsError85(Exception):
    r"""Payment required"""

    data: ClerkErrorsError85Data

    def __init__(self, data: ClerkErrorsError85Data):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, ClerkErrorsError85Data)


class ClerkErrorsError86Data(BaseModel):
    errors: List[ClerkError]

    meta: Optional[ClerkErrorsMeta] = None


class ClerkErrorsError86(Exception):
    r"""Payment required"""

    data: ClerkErrorsError86Data

    def __init__(self, data: ClerkErrorsError86Data):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, ClerkErrorsError86Data)


class ClerkErrorsError87Data(BaseModel):
    errors: List[ClerkError]

    meta: Optional[ClerkErrorsMeta] = None


class ClerkErrorsError87(Exception):
    r"""Payment required"""

    data: ClerkErrorsError87Data

    def __init__(self, data: ClerkErrorsError87Data):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, ClerkErrorsError87Data)


class ClerkErrorsError88Data(BaseModel):
    errors: List[ClerkError]

    meta: Optional[ClerkErrorsMeta] = None


class ClerkErrorsError88(Exception):
    r"""Payment required"""

    data: ClerkErrorsError88Data

    def __init__(self, data: ClerkErrorsError88Data):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, ClerkErrorsError88Data)


class ClerkErrorsError89Data(BaseModel):
    errors: List[ClerkError]

    meta: Optional[ClerkErrorsMeta] = None


class ClerkErrorsError89(Exception):
    r"""Payment required"""

    data: ClerkErrorsError89Data

    def __init__(self, data: ClerkErrorsError89Data):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, ClerkErrorsError89Data)
