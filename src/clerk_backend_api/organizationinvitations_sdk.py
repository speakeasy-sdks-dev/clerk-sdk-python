"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from clerk_backend_api import models, utils
from clerk_backend_api._hooks import HookContext
from clerk_backend_api.types import OptionalNullable, UNSET
from jsonpath import JSONPath
from typing import Any, Dict, List, Optional, Union
from typing_extensions import deprecated


class OrganizationInvitationsSDK(BaseSDK):
    def create(
        self,
        *,
        organization_id: str,
        email_address: str,
        inviter_user_id: str,
        role: str,
        public_metadata: Optional[
            Union[
                models.CreateOrganizationInvitationPublicMetadata,
                models.CreateOrganizationInvitationPublicMetadataTypedDict,
            ]
        ] = None,
        private_metadata: Optional[
            Union[
                models.CreateOrganizationInvitationPrivateMetadata,
                models.CreateOrganizationInvitationPrivateMetadataTypedDict,
            ]
        ] = None,
        redirect_url: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ) -> Optional[models.OrganizationInvitation]:
        r"""Create and send an organization invitation

        Creates a new organization invitation and sends an email to the provided `email_address` with a link to accept the invitation and join the organization.
        You can specify the `role` for the invited organization member.

        New organization invitations get a \"pending\" status until they are revoked by an organization administrator or accepted by the invitee.

        The request body supports passing an optional `redirect_url` parameter.
        When the invited user clicks the link to accept the invitation, they will be redirected to the URL provided.
        Use this parameter to implement a custom invitation acceptance flow.

        You must specify the ID of the user that will send the invitation with the `inviter_user_id` parameter.
        That user must be a member with administrator privileges in the organization.
        Only \"admin\" members can create organization invitations.

        You can optionally provide public and private metadata for the organization invitation.
        The public metadata are visible by both the Frontend and the Backend whereas the private ones only by the Backend.
        When the organization invitation is accepted, the metadata will be transferred to the newly created organization membership.

        :param organization_id: The ID of the organization for which to send the invitation
        :param email_address: The email address of the new member that is going to be invited to the organization
        :param inviter_user_id: The ID of the user that invites the new member to the organization. Must be an administrator in the organization.
        :param role: The role of the new member in the organization
        :param public_metadata: Metadata saved on the organization invitation, read-only from the Frontend API and fully accessible (read/write) from the Backend API.
        :param private_metadata: Metadata saved on the organization invitation, fully accessible (read/write) from the Backend API but not visible from the Frontend API.
        :param redirect_url: Optional URL that the invitee will be redirected to once they accept the invitation by clicking the join link in the invitation email.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.CreateOrganizationInvitationRequest(
            organization_id=organization_id,
            request_body=models.CreateOrganizationInvitationRequestBody(
                email_address=email_address,
                inviter_user_id=inviter_user_id,
                role=role,
                public_metadata=utils.get_pydantic_model(
                    public_metadata,
                    Optional[models.CreateOrganizationInvitationPublicMetadata],
                ),
                private_metadata=utils.get_pydantic_model(
                    private_metadata,
                    Optional[models.CreateOrganizationInvitationPrivateMetadata],
                ),
                redirect_url=redirect_url,
            ),
        )

        req = self.build_request(
            method="POST",
            path="/organizations/{organization_id}/invitations",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.request_body,
                False,
                False,
                "json",
                models.CreateOrganizationInvitationRequestBody,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                operation_id="CreateOrganizationInvitation",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["400", "403", "404", "422", "4XX", "5XX"],
            retry_config=retry_config,
        )

        data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(
                http_res.text, Optional[models.OrganizationInvitation]
            )
        if utils.match_response(
            http_res, ["400", "403", "404", "422"], "application/json"
        ):
            data = utils.unmarshal_json(http_res.text, models.ClerkErrorsError63Data)
            raise models.ClerkErrorsError63(data=data)
        if utils.match_response(http_res, ["4XX", "5XX"], "*"):
            raise models.SDKError(
                "API error occurred", http_res.status_code, http_res.text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        raise models.SDKError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res.text,
            http_res,
        )

    async def create_async(
        self,
        *,
        organization_id: str,
        email_address: str,
        inviter_user_id: str,
        role: str,
        public_metadata: Optional[
            Union[
                models.CreateOrganizationInvitationPublicMetadata,
                models.CreateOrganizationInvitationPublicMetadataTypedDict,
            ]
        ] = None,
        private_metadata: Optional[
            Union[
                models.CreateOrganizationInvitationPrivateMetadata,
                models.CreateOrganizationInvitationPrivateMetadataTypedDict,
            ]
        ] = None,
        redirect_url: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ) -> Optional[models.OrganizationInvitation]:
        r"""Create and send an organization invitation

        Creates a new organization invitation and sends an email to the provided `email_address` with a link to accept the invitation and join the organization.
        You can specify the `role` for the invited organization member.

        New organization invitations get a \"pending\" status until they are revoked by an organization administrator or accepted by the invitee.

        The request body supports passing an optional `redirect_url` parameter.
        When the invited user clicks the link to accept the invitation, they will be redirected to the URL provided.
        Use this parameter to implement a custom invitation acceptance flow.

        You must specify the ID of the user that will send the invitation with the `inviter_user_id` parameter.
        That user must be a member with administrator privileges in the organization.
        Only \"admin\" members can create organization invitations.

        You can optionally provide public and private metadata for the organization invitation.
        The public metadata are visible by both the Frontend and the Backend whereas the private ones only by the Backend.
        When the organization invitation is accepted, the metadata will be transferred to the newly created organization membership.

        :param organization_id: The ID of the organization for which to send the invitation
        :param email_address: The email address of the new member that is going to be invited to the organization
        :param inviter_user_id: The ID of the user that invites the new member to the organization. Must be an administrator in the organization.
        :param role: The role of the new member in the organization
        :param public_metadata: Metadata saved on the organization invitation, read-only from the Frontend API and fully accessible (read/write) from the Backend API.
        :param private_metadata: Metadata saved on the organization invitation, fully accessible (read/write) from the Backend API but not visible from the Frontend API.
        :param redirect_url: Optional URL that the invitee will be redirected to once they accept the invitation by clicking the join link in the invitation email.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.CreateOrganizationInvitationRequest(
            organization_id=organization_id,
            request_body=models.CreateOrganizationInvitationRequestBody(
                email_address=email_address,
                inviter_user_id=inviter_user_id,
                role=role,
                public_metadata=utils.get_pydantic_model(
                    public_metadata,
                    Optional[models.CreateOrganizationInvitationPublicMetadata],
                ),
                private_metadata=utils.get_pydantic_model(
                    private_metadata,
                    Optional[models.CreateOrganizationInvitationPrivateMetadata],
                ),
                redirect_url=redirect_url,
            ),
        )

        req = self.build_request_async(
            method="POST",
            path="/organizations/{organization_id}/invitations",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.request_body,
                False,
                False,
                "json",
                models.CreateOrganizationInvitationRequestBody,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                operation_id="CreateOrganizationInvitation",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["400", "403", "404", "422", "4XX", "5XX"],
            retry_config=retry_config,
        )

        data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(
                http_res.text, Optional[models.OrganizationInvitation]
            )
        if utils.match_response(
            http_res, ["400", "403", "404", "422"], "application/json"
        ):
            data = utils.unmarshal_json(http_res.text, models.ClerkErrorsError63Data)
            raise models.ClerkErrorsError63(data=data)
        if utils.match_response(http_res, ["4XX", "5XX"], "*"):
            raise models.SDKError(
                "API error occurred", http_res.status_code, http_res.text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        raise models.SDKError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res.text,
            http_res,
        )

    def list(
        self,
        *,
        organization_id: str,
        limit: Optional[int] = 10,
        offset: Optional[int] = 0,
        status: Optional[models.ListOrganizationInvitationsQueryParamStatus] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ) -> Optional[models.ListOrganizationInvitationsResponse]:
        r"""Get a list of organization invitations

        This request returns the list of organization invitations.
        Results can be paginated using the optional `limit` and `offset` query parameters.
        You can filter them by providing the 'status' query parameter, that accepts multiple values.
        The organization invitations are ordered by descending creation date.
        Most recent invitations will be returned first.
        Any invitations created as a result of an Organization Domain are not included in the results.

        :param organization_id: The organization ID.
        :param limit: Applies a limit to the number of results returned. Can be used for paginating the results together with `offset`.
        :param offset: Skip the first `offset` results when paginating. Needs to be an integer greater or equal to zero. To be used in conjunction with `limit`.
        :param status: Filter organization invitations based on their status
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.ListOrganizationInvitationsRequest(
            organization_id=organization_id,
            limit=limit,
            offset=offset,
            status=status,
        )

        req = self.build_request(
            method="GET",
            path="/organizations/{organization_id}/invitations",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                operation_id="ListOrganizationInvitations",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["400", "404", "4XX", "5XX"],
            retry_config=retry_config,
        )

        def next_func() -> Optional[models.ListOrganizationInvitationsResponse]:
            body = utils.unmarshal_json(http_res.text, Dict[Any, Any])
            offset = request.offset if not request.offset is None else 0

            if not http_res.text:
                return None
            results = JSONPath("$").parse(body)
            if len(results) == 0 or len(results[0]) == 0:
                return None
            limit = request.limit if not request.limit is None else 0
            if len(results[0]) < limit:
                return None
            next_offset = offset + len(results[0])

            return self.list(
                organization_id=organization_id,
                limit=limit,
                offset=next_offset,
                status=status,
                retries=retries,
            )

        data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return models.ListOrganizationInvitationsResponse(
                result=utils.unmarshal_json(
                    http_res.text, Optional[models.OrganizationInvitations]
                ),
                next=next_func,
            )
        if utils.match_response(http_res, ["400", "404"], "application/json"):
            data = utils.unmarshal_json(http_res.text, models.ClerkErrorsError64Data)
            raise models.ClerkErrorsError64(data=data)
        if utils.match_response(http_res, ["4XX", "5XX"], "*"):
            raise models.SDKError(
                "API error occurred", http_res.status_code, http_res.text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        raise models.SDKError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res.text,
            http_res,
        )

    async def list_async(
        self,
        *,
        organization_id: str,
        limit: Optional[int] = 10,
        offset: Optional[int] = 0,
        status: Optional[models.ListOrganizationInvitationsQueryParamStatus] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ) -> Optional[models.ListOrganizationInvitationsResponse]:
        r"""Get a list of organization invitations

        This request returns the list of organization invitations.
        Results can be paginated using the optional `limit` and `offset` query parameters.
        You can filter them by providing the 'status' query parameter, that accepts multiple values.
        The organization invitations are ordered by descending creation date.
        Most recent invitations will be returned first.
        Any invitations created as a result of an Organization Domain are not included in the results.

        :param organization_id: The organization ID.
        :param limit: Applies a limit to the number of results returned. Can be used for paginating the results together with `offset`.
        :param offset: Skip the first `offset` results when paginating. Needs to be an integer greater or equal to zero. To be used in conjunction with `limit`.
        :param status: Filter organization invitations based on their status
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.ListOrganizationInvitationsRequest(
            organization_id=organization_id,
            limit=limit,
            offset=offset,
            status=status,
        )

        req = self.build_request_async(
            method="GET",
            path="/organizations/{organization_id}/invitations",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                operation_id="ListOrganizationInvitations",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["400", "404", "4XX", "5XX"],
            retry_config=retry_config,
        )

        def next_func() -> Optional[models.ListOrganizationInvitationsResponse]:
            body = utils.unmarshal_json(http_res.text, Dict[Any, Any])
            offset = request.offset if not request.offset is None else 0

            if not http_res.text:
                return None
            results = JSONPath("$").parse(body)
            if len(results) == 0 or len(results[0]) == 0:
                return None
            limit = request.limit if not request.limit is None else 0
            if len(results[0]) < limit:
                return None
            next_offset = offset + len(results[0])

            return self.list(
                organization_id=organization_id,
                limit=limit,
                offset=next_offset,
                status=status,
                retries=retries,
            )

        data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return models.ListOrganizationInvitationsResponse(
                result=utils.unmarshal_json(
                    http_res.text, Optional[models.OrganizationInvitations]
                ),
                next=next_func,
            )
        if utils.match_response(http_res, ["400", "404"], "application/json"):
            data = utils.unmarshal_json(http_res.text, models.ClerkErrorsError64Data)
            raise models.ClerkErrorsError64(data=data)
        if utils.match_response(http_res, ["4XX", "5XX"], "*"):
            raise models.SDKError(
                "API error occurred", http_res.status_code, http_res.text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        raise models.SDKError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res.text,
            http_res,
        )

    def create_bulk(
        self,
        *,
        organization_id: str,
        request_body: Union[
            List[models.RequestBody], List[models.RequestBodyTypedDict]
        ],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ) -> Optional[models.OrganizationInvitations]:
        r"""Bulk create and send organization invitations

        Creates new organization invitations in bulk and sends out emails to the provided email addresses with a link to accept the invitation and join the organization.
        You can specify a different `role` for each invited organization member.
        New organization invitations get a \"pending\" status until they are revoked by an organization administrator or accepted by the invitee.
        The request body supports passing an optional `redirect_url` parameter for each invitation.
        When the invited user clicks the link to accept the invitation, they will be redirected to the provided URL.
        Use this parameter to implement a custom invitation acceptance flow.
        You must specify the ID of the user that will send the invitation with the `inviter_user_id` parameter. Each invitation
        can have a different inviter user.
        Inviter users must be members with administrator privileges in the organization.
        Only \"admin\" members can create organization invitations.
        You can optionally provide public and private metadata for each organization invitation. The public metadata are visible
        by both the Frontend and the Backend, whereas the private metadata are only visible by the Backend.
        When the organization invitation is accepted, the metadata will be transferred to the newly created organization membership.

        :param organization_id: The organization ID.
        :param request_body:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.CreateOrganizationInvitationBulkRequest(
            organization_id=organization_id,
            request_body=utils.get_pydantic_model(
                request_body, List[models.RequestBody]
            ),
        )

        req = self.build_request(
            method="POST",
            path="/organizations/{organization_id}/invitations/bulk",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.request_body, False, False, "json", List[models.RequestBody]
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                operation_id="CreateOrganizationInvitationBulk",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["400", "403", "404", "422", "4XX", "5XX"],
            retry_config=retry_config,
        )

        data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(
                http_res.text, Optional[models.OrganizationInvitations]
            )
        if utils.match_response(
            http_res, ["400", "403", "404", "422"], "application/json"
        ):
            data = utils.unmarshal_json(http_res.text, models.ClerkErrorsError65Data)
            raise models.ClerkErrorsError65(data=data)
        if utils.match_response(http_res, ["4XX", "5XX"], "*"):
            raise models.SDKError(
                "API error occurred", http_res.status_code, http_res.text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        raise models.SDKError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res.text,
            http_res,
        )

    async def create_bulk_async(
        self,
        *,
        organization_id: str,
        request_body: Union[
            List[models.RequestBody], List[models.RequestBodyTypedDict]
        ],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ) -> Optional[models.OrganizationInvitations]:
        r"""Bulk create and send organization invitations

        Creates new organization invitations in bulk and sends out emails to the provided email addresses with a link to accept the invitation and join the organization.
        You can specify a different `role` for each invited organization member.
        New organization invitations get a \"pending\" status until they are revoked by an organization administrator or accepted by the invitee.
        The request body supports passing an optional `redirect_url` parameter for each invitation.
        When the invited user clicks the link to accept the invitation, they will be redirected to the provided URL.
        Use this parameter to implement a custom invitation acceptance flow.
        You must specify the ID of the user that will send the invitation with the `inviter_user_id` parameter. Each invitation
        can have a different inviter user.
        Inviter users must be members with administrator privileges in the organization.
        Only \"admin\" members can create organization invitations.
        You can optionally provide public and private metadata for each organization invitation. The public metadata are visible
        by both the Frontend and the Backend, whereas the private metadata are only visible by the Backend.
        When the organization invitation is accepted, the metadata will be transferred to the newly created organization membership.

        :param organization_id: The organization ID.
        :param request_body:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.CreateOrganizationInvitationBulkRequest(
            organization_id=organization_id,
            request_body=utils.get_pydantic_model(
                request_body, List[models.RequestBody]
            ),
        )

        req = self.build_request_async(
            method="POST",
            path="/organizations/{organization_id}/invitations/bulk",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.request_body, False, False, "json", List[models.RequestBody]
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                operation_id="CreateOrganizationInvitationBulk",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["400", "403", "404", "422", "4XX", "5XX"],
            retry_config=retry_config,
        )

        data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(
                http_res.text, Optional[models.OrganizationInvitations]
            )
        if utils.match_response(
            http_res, ["400", "403", "404", "422"], "application/json"
        ):
            data = utils.unmarshal_json(http_res.text, models.ClerkErrorsError65Data)
            raise models.ClerkErrorsError65(data=data)
        if utils.match_response(http_res, ["4XX", "5XX"], "*"):
            raise models.SDKError(
                "API error occurred", http_res.status_code, http_res.text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        raise models.SDKError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res.text,
            http_res,
        )

    @deprecated(
        "warning: ** DEPRECATED ** - This will be removed in a future release, please migrate away from it as soon as possible."
    )
    def list_pending(
        self,
        *,
        organization_id: str,
        limit: Optional[int] = 10,
        offset: Optional[int] = 0,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ) -> Optional[models.ListPendingOrganizationInvitationsResponse]:
        r"""Get a list of pending organization invitations

        This request returns the list of organization invitations with \"pending\" status.
        These are the organization invitations that can still be used to join the organization, but have not been accepted by the invited user yet.
        Results can be paginated using the optional `limit` and `offset` query parameters.
        The organization invitations are ordered by descending creation date.
        Most recent invitations will be returned first.
        Any invitations created as a result of an Organization Domain are not included in the results.

        :param organization_id: The organization ID.
        :param limit: Applies a limit to the number of results returned. Can be used for paginating the results together with `offset`.
        :param offset: Skip the first `offset` results when paginating. Needs to be an integer greater or equal to zero. To be used in conjunction with `limit`.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.ListPendingOrganizationInvitationsRequest(
            organization_id=organization_id,
            limit=limit,
            offset=offset,
        )

        req = self.build_request(
            method="GET",
            path="/organizations/{organization_id}/invitations/pending",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                operation_id="ListPendingOrganizationInvitations",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["400", "404", "4XX", "5XX"],
            retry_config=retry_config,
        )

        def next_func() -> Optional[models.ListPendingOrganizationInvitationsResponse]:
            body = utils.unmarshal_json(http_res.text, Dict[Any, Any])
            offset = request.offset if not request.offset is None else 0

            if not http_res.text:
                return None
            results = JSONPath("$").parse(body)
            if len(results) == 0 or len(results[0]) == 0:
                return None
            limit = request.limit if not request.limit is None else 0
            if len(results[0]) < limit:
                return None
            next_offset = offset + len(results[0])

            return self.list_pending(
                organization_id=organization_id,
                limit=limit,
                offset=next_offset,
                retries=retries,
            )

        data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return models.ListPendingOrganizationInvitationsResponse(
                result=utils.unmarshal_json(
                    http_res.text, Optional[models.OrganizationInvitations]
                ),
                next=next_func,
            )
        if utils.match_response(http_res, ["400", "404"], "application/json"):
            data = utils.unmarshal_json(http_res.text, models.ClerkErrorsError66Data)
            raise models.ClerkErrorsError66(data=data)
        if utils.match_response(http_res, ["4XX", "5XX"], "*"):
            raise models.SDKError(
                "API error occurred", http_res.status_code, http_res.text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        raise models.SDKError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res.text,
            http_res,
        )

    @deprecated(
        "warning: ** DEPRECATED ** - This will be removed in a future release, please migrate away from it as soon as possible."
    )
    async def list_pending_async(
        self,
        *,
        organization_id: str,
        limit: Optional[int] = 10,
        offset: Optional[int] = 0,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ) -> Optional[models.ListPendingOrganizationInvitationsResponse]:
        r"""Get a list of pending organization invitations

        This request returns the list of organization invitations with \"pending\" status.
        These are the organization invitations that can still be used to join the organization, but have not been accepted by the invited user yet.
        Results can be paginated using the optional `limit` and `offset` query parameters.
        The organization invitations are ordered by descending creation date.
        Most recent invitations will be returned first.
        Any invitations created as a result of an Organization Domain are not included in the results.

        :param organization_id: The organization ID.
        :param limit: Applies a limit to the number of results returned. Can be used for paginating the results together with `offset`.
        :param offset: Skip the first `offset` results when paginating. Needs to be an integer greater or equal to zero. To be used in conjunction with `limit`.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.ListPendingOrganizationInvitationsRequest(
            organization_id=organization_id,
            limit=limit,
            offset=offset,
        )

        req = self.build_request_async(
            method="GET",
            path="/organizations/{organization_id}/invitations/pending",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                operation_id="ListPendingOrganizationInvitations",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["400", "404", "4XX", "5XX"],
            retry_config=retry_config,
        )

        def next_func() -> Optional[models.ListPendingOrganizationInvitationsResponse]:
            body = utils.unmarshal_json(http_res.text, Dict[Any, Any])
            offset = request.offset if not request.offset is None else 0

            if not http_res.text:
                return None
            results = JSONPath("$").parse(body)
            if len(results) == 0 or len(results[0]) == 0:
                return None
            limit = request.limit if not request.limit is None else 0
            if len(results[0]) < limit:
                return None
            next_offset = offset + len(results[0])

            return self.list_pending(
                organization_id=organization_id,
                limit=limit,
                offset=next_offset,
                retries=retries,
            )

        data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return models.ListPendingOrganizationInvitationsResponse(
                result=utils.unmarshal_json(
                    http_res.text, Optional[models.OrganizationInvitations]
                ),
                next=next_func,
            )
        if utils.match_response(http_res, ["400", "404"], "application/json"):
            data = utils.unmarshal_json(http_res.text, models.ClerkErrorsError66Data)
            raise models.ClerkErrorsError66(data=data)
        if utils.match_response(http_res, ["4XX", "5XX"], "*"):
            raise models.SDKError(
                "API error occurred", http_res.status_code, http_res.text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        raise models.SDKError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res.text,
            http_res,
        )

    def get(
        self,
        *,
        organization_id: str,
        invitation_id: str,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ) -> Optional[models.OrganizationInvitation]:
        r"""Retrieve an organization invitation by ID

        Use this request to get an existing organization invitation by ID.

        :param organization_id: The organization ID.
        :param invitation_id: The organization invitation ID.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.GetOrganizationInvitationRequest(
            organization_id=organization_id,
            invitation_id=invitation_id,
        )

        req = self.build_request(
            method="GET",
            path="/organizations/{organization_id}/invitations/{invitation_id}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                operation_id="GetOrganizationInvitation",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["400", "403", "404", "4XX", "5XX"],
            retry_config=retry_config,
        )

        data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(
                http_res.text, Optional[models.OrganizationInvitation]
            )
        if utils.match_response(http_res, ["400", "403", "404"], "application/json"):
            data = utils.unmarshal_json(http_res.text, models.ClerkErrorsError67Data)
            raise models.ClerkErrorsError67(data=data)
        if utils.match_response(http_res, ["4XX", "5XX"], "*"):
            raise models.SDKError(
                "API error occurred", http_res.status_code, http_res.text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        raise models.SDKError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res.text,
            http_res,
        )

    async def get_async(
        self,
        *,
        organization_id: str,
        invitation_id: str,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ) -> Optional[models.OrganizationInvitation]:
        r"""Retrieve an organization invitation by ID

        Use this request to get an existing organization invitation by ID.

        :param organization_id: The organization ID.
        :param invitation_id: The organization invitation ID.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.GetOrganizationInvitationRequest(
            organization_id=organization_id,
            invitation_id=invitation_id,
        )

        req = self.build_request_async(
            method="GET",
            path="/organizations/{organization_id}/invitations/{invitation_id}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                operation_id="GetOrganizationInvitation",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["400", "403", "404", "4XX", "5XX"],
            retry_config=retry_config,
        )

        data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(
                http_res.text, Optional[models.OrganizationInvitation]
            )
        if utils.match_response(http_res, ["400", "403", "404"], "application/json"):
            data = utils.unmarshal_json(http_res.text, models.ClerkErrorsError67Data)
            raise models.ClerkErrorsError67(data=data)
        if utils.match_response(http_res, ["4XX", "5XX"], "*"):
            raise models.SDKError(
                "API error occurred", http_res.status_code, http_res.text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        raise models.SDKError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res.text,
            http_res,
        )

    def revoke(
        self,
        *,
        organization_id: str,
        invitation_id: str,
        requesting_user_id: str,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ) -> Optional[models.OrganizationInvitation]:
        r"""Revoke a pending organization invitation

        Use this request to revoke a previously issued organization invitation.
        Revoking an organization invitation makes it invalid; the invited user will no longer be able to join the organization with the revoked invitation.
        Only organization invitations with \"pending\" status can be revoked.
        The request needs the `requesting_user_id` parameter to specify the user which revokes the invitation.
        Only users with \"admin\" role can revoke invitations.

        :param organization_id: The organization ID.
        :param invitation_id: The organization invitation ID.
        :param requesting_user_id: The ID of the user that revokes the invitation. Must be an administrator in the organization.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.RevokeOrganizationInvitationRequest(
            organization_id=organization_id,
            invitation_id=invitation_id,
            request_body=models.RevokeOrganizationInvitationRequestBody(
                requesting_user_id=requesting_user_id,
            ),
        )

        req = self.build_request(
            method="POST",
            path="/organizations/{organization_id}/invitations/{invitation_id}/revoke",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.request_body,
                False,
                False,
                "json",
                models.RevokeOrganizationInvitationRequestBody,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                operation_id="RevokeOrganizationInvitation",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["400", "403", "404", "4XX", "5XX"],
            retry_config=retry_config,
        )

        data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(
                http_res.text, Optional[models.OrganizationInvitation]
            )
        if utils.match_response(http_res, ["400", "403", "404"], "application/json"):
            data = utils.unmarshal_json(http_res.text, models.ClerkErrorsError68Data)
            raise models.ClerkErrorsError68(data=data)
        if utils.match_response(http_res, ["4XX", "5XX"], "*"):
            raise models.SDKError(
                "API error occurred", http_res.status_code, http_res.text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        raise models.SDKError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res.text,
            http_res,
        )

    async def revoke_async(
        self,
        *,
        organization_id: str,
        invitation_id: str,
        requesting_user_id: str,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ) -> Optional[models.OrganizationInvitation]:
        r"""Revoke a pending organization invitation

        Use this request to revoke a previously issued organization invitation.
        Revoking an organization invitation makes it invalid; the invited user will no longer be able to join the organization with the revoked invitation.
        Only organization invitations with \"pending\" status can be revoked.
        The request needs the `requesting_user_id` parameter to specify the user which revokes the invitation.
        Only users with \"admin\" role can revoke invitations.

        :param organization_id: The organization ID.
        :param invitation_id: The organization invitation ID.
        :param requesting_user_id: The ID of the user that revokes the invitation. Must be an administrator in the organization.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.RevokeOrganizationInvitationRequest(
            organization_id=organization_id,
            invitation_id=invitation_id,
            request_body=models.RevokeOrganizationInvitationRequestBody(
                requesting_user_id=requesting_user_id,
            ),
        )

        req = self.build_request_async(
            method="POST",
            path="/organizations/{organization_id}/invitations/{invitation_id}/revoke",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.request_body,
                False,
                False,
                "json",
                models.RevokeOrganizationInvitationRequestBody,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                operation_id="RevokeOrganizationInvitation",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["400", "403", "404", "4XX", "5XX"],
            retry_config=retry_config,
        )

        data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(
                http_res.text, Optional[models.OrganizationInvitation]
            )
        if utils.match_response(http_res, ["400", "403", "404"], "application/json"):
            data = utils.unmarshal_json(http_res.text, models.ClerkErrorsError68Data)
            raise models.ClerkErrorsError68(data=data)
        if utils.match_response(http_res, ["4XX", "5XX"], "*"):
            raise models.SDKError(
                "API error occurred", http_res.status_code, http_res.text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        raise models.SDKError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res.text,
            http_res,
        )
