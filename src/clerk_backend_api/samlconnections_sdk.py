"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from clerk_backend_api import models, utils
from clerk_backend_api._hooks import HookContext
from clerk_backend_api.types import BaseModel, OptionalNullable, UNSET
from jsonpath import JSONPath
from typing import Any, Dict, Optional, Union, cast


class SamlConnectionsSDK(BaseSDK):
    def list(
        self,
        *,
        limit: Optional[int] = 10,
        offset: Optional[int] = 0,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ) -> Optional[models.ListSAMLConnectionsResponse]:
        r"""Get a list of SAML Connections for an instance

        Returns the list of SAML Connections for an instance.
        Results can be paginated using the optional `limit` and `offset` query parameters.
        The SAML Connections are ordered by descending creation date and the most recent will be returned first.

        :param limit: Applies a limit to the number of results returned. Can be used for paginating the results together with `offset`.
        :param offset: Skip the first `offset` results when paginating. Needs to be an integer greater or equal to zero. To be used in conjunction with `limit`.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.ListSAMLConnectionsRequest(
            limit=limit,
            offset=offset,
        )

        req = self.build_request(
            method="GET",
            path="/saml_connections",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                operation_id="ListSAMLConnections",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["402", "403", "422", "4XX", "5XX"],
            retry_config=retry_config,
        )

        def next_func() -> Optional[models.ListSAMLConnectionsResponse]:
            body = utils.unmarshal_json(http_res.text, Dict[Any, Any])
            offset = request.offset if not request.offset is None else 0

            if not http_res.text:
                return None
            results = JSONPath("$").parse(body)
            if len(results) == 0 or len(results[0]) == 0:
                return None
            limit = request.limit if not request.limit is None else 0
            if len(results[0]) < limit:
                return None
            next_offset = offset + len(results[0])

            return self.list(
                limit=limit,
                offset=next_offset,
                retries=retries,
            )

        data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return models.ListSAMLConnectionsResponse(
                result=utils.unmarshal_json(
                    http_res.text, Optional[models.SAMLConnections]
                ),
                next=next_func,
            )
        if utils.match_response(http_res, ["402", "403", "422"], "application/json"):
            data = utils.unmarshal_json(http_res.text, models.ClerkErrorsError85Data)
            raise models.ClerkErrorsError85(data=data)
        if utils.match_response(http_res, ["4XX", "5XX"], "*"):
            raise models.SDKError(
                "API error occurred", http_res.status_code, http_res.text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        raise models.SDKError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res.text,
            http_res,
        )

    async def list_async(
        self,
        *,
        limit: Optional[int] = 10,
        offset: Optional[int] = 0,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ) -> Optional[models.ListSAMLConnectionsResponse]:
        r"""Get a list of SAML Connections for an instance

        Returns the list of SAML Connections for an instance.
        Results can be paginated using the optional `limit` and `offset` query parameters.
        The SAML Connections are ordered by descending creation date and the most recent will be returned first.

        :param limit: Applies a limit to the number of results returned. Can be used for paginating the results together with `offset`.
        :param offset: Skip the first `offset` results when paginating. Needs to be an integer greater or equal to zero. To be used in conjunction with `limit`.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.ListSAMLConnectionsRequest(
            limit=limit,
            offset=offset,
        )

        req = self.build_request_async(
            method="GET",
            path="/saml_connections",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                operation_id="ListSAMLConnections",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["402", "403", "422", "4XX", "5XX"],
            retry_config=retry_config,
        )

        def next_func() -> Optional[models.ListSAMLConnectionsResponse]:
            body = utils.unmarshal_json(http_res.text, Dict[Any, Any])
            offset = request.offset if not request.offset is None else 0

            if not http_res.text:
                return None
            results = JSONPath("$").parse(body)
            if len(results) == 0 or len(results[0]) == 0:
                return None
            limit = request.limit if not request.limit is None else 0
            if len(results[0]) < limit:
                return None
            next_offset = offset + len(results[0])

            return self.list(
                limit=limit,
                offset=next_offset,
                retries=retries,
            )

        data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return models.ListSAMLConnectionsResponse(
                result=utils.unmarshal_json(
                    http_res.text, Optional[models.SAMLConnections]
                ),
                next=next_func,
            )
        if utils.match_response(http_res, ["402", "403", "422"], "application/json"):
            data = utils.unmarshal_json(http_res.text, models.ClerkErrorsError85Data)
            raise models.ClerkErrorsError85(data=data)
        if utils.match_response(http_res, ["4XX", "5XX"], "*"):
            raise models.SDKError(
                "API error occurred", http_res.status_code, http_res.text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        raise models.SDKError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res.text,
            http_res,
        )

    def create(
        self,
        *,
        request: Optional[
            Union[
                models.CreateSAMLConnectionRequestBody,
                models.CreateSAMLConnectionRequestBodyTypedDict,
            ]
        ] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ) -> Optional[models.SAMLConnection]:
        r"""Create a SAML Connection

        Create a new SAML Connection.

        :param request: The request object to send.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        if not isinstance(request, BaseModel):
            request = utils.unmarshal(
                request, Optional[models.CreateSAMLConnectionRequestBody]
            )
        request = cast(Optional[models.CreateSAMLConnectionRequestBody], request)

        req = self.build_request(
            method="POST",
            path="/saml_connections",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request,
                False,
                True,
                "json",
                Optional[models.CreateSAMLConnectionRequestBody],
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                operation_id="CreateSAMLConnection",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["402", "403", "422", "4XX", "5XX"],
            retry_config=retry_config,
        )

        data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(http_res.text, Optional[models.SAMLConnection])
        if utils.match_response(http_res, ["402", "403", "422"], "application/json"):
            data = utils.unmarshal_json(http_res.text, models.ClerkErrorsError86Data)
            raise models.ClerkErrorsError86(data=data)
        if utils.match_response(http_res, ["4XX", "5XX"], "*"):
            raise models.SDKError(
                "API error occurred", http_res.status_code, http_res.text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        raise models.SDKError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res.text,
            http_res,
        )

    async def create_async(
        self,
        *,
        request: Optional[
            Union[
                models.CreateSAMLConnectionRequestBody,
                models.CreateSAMLConnectionRequestBodyTypedDict,
            ]
        ] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ) -> Optional[models.SAMLConnection]:
        r"""Create a SAML Connection

        Create a new SAML Connection.

        :param request: The request object to send.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        if not isinstance(request, BaseModel):
            request = utils.unmarshal(
                request, Optional[models.CreateSAMLConnectionRequestBody]
            )
        request = cast(Optional[models.CreateSAMLConnectionRequestBody], request)

        req = self.build_request_async(
            method="POST",
            path="/saml_connections",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request,
                False,
                True,
                "json",
                Optional[models.CreateSAMLConnectionRequestBody],
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                operation_id="CreateSAMLConnection",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["402", "403", "422", "4XX", "5XX"],
            retry_config=retry_config,
        )

        data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(http_res.text, Optional[models.SAMLConnection])
        if utils.match_response(http_res, ["402", "403", "422"], "application/json"):
            data = utils.unmarshal_json(http_res.text, models.ClerkErrorsError86Data)
            raise models.ClerkErrorsError86(data=data)
        if utils.match_response(http_res, ["4XX", "5XX"], "*"):
            raise models.SDKError(
                "API error occurred", http_res.status_code, http_res.text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        raise models.SDKError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res.text,
            http_res,
        )

    def get(
        self,
        *,
        saml_connection_id: str,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ) -> Optional[models.SAMLConnection]:
        r"""Retrieve a SAML Connection by ID

        Fetches the SAML Connection whose ID matches the provided `saml_connection_id` in the path.

        :param saml_connection_id: The ID of the SAML Connection
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.GetSAMLConnectionRequest(
            saml_connection_id=saml_connection_id,
        )

        req = self.build_request(
            method="GET",
            path="/saml_connections/{saml_connection_id}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                operation_id="GetSAMLConnection",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["402", "403", "404", "4XX", "5XX"],
            retry_config=retry_config,
        )

        data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(http_res.text, Optional[models.SAMLConnection])
        if utils.match_response(http_res, ["402", "403", "404"], "application/json"):
            data = utils.unmarshal_json(http_res.text, models.ClerkErrorsError87Data)
            raise models.ClerkErrorsError87(data=data)
        if utils.match_response(http_res, ["4XX", "5XX"], "*"):
            raise models.SDKError(
                "API error occurred", http_res.status_code, http_res.text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        raise models.SDKError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res.text,
            http_res,
        )

    async def get_async(
        self,
        *,
        saml_connection_id: str,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ) -> Optional[models.SAMLConnection]:
        r"""Retrieve a SAML Connection by ID

        Fetches the SAML Connection whose ID matches the provided `saml_connection_id` in the path.

        :param saml_connection_id: The ID of the SAML Connection
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.GetSAMLConnectionRequest(
            saml_connection_id=saml_connection_id,
        )

        req = self.build_request_async(
            method="GET",
            path="/saml_connections/{saml_connection_id}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                operation_id="GetSAMLConnection",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["402", "403", "404", "4XX", "5XX"],
            retry_config=retry_config,
        )

        data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(http_res.text, Optional[models.SAMLConnection])
        if utils.match_response(http_res, ["402", "403", "404"], "application/json"):
            data = utils.unmarshal_json(http_res.text, models.ClerkErrorsError87Data)
            raise models.ClerkErrorsError87(data=data)
        if utils.match_response(http_res, ["4XX", "5XX"], "*"):
            raise models.SDKError(
                "API error occurred", http_res.status_code, http_res.text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        raise models.SDKError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res.text,
            http_res,
        )

    def update(
        self,
        *,
        saml_connection_id: str,
        name: OptionalNullable[str] = UNSET,
        domain: OptionalNullable[str] = UNSET,
        idp_entity_id: OptionalNullable[str] = UNSET,
        idp_sso_url: OptionalNullable[str] = UNSET,
        idp_certificate: OptionalNullable[str] = UNSET,
        idp_metadata_url: OptionalNullable[str] = UNSET,
        idp_metadata: OptionalNullable[str] = UNSET,
        attribute_mapping: OptionalNullable[
            Union[
                models.UpdateSAMLConnectionAttributeMapping,
                models.UpdateSAMLConnectionAttributeMappingTypedDict,
            ]
        ] = UNSET,
        active: OptionalNullable[bool] = UNSET,
        sync_user_attributes: OptionalNullable[bool] = UNSET,
        allow_subdomains: OptionalNullable[bool] = UNSET,
        allow_idp_initiated: OptionalNullable[bool] = UNSET,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ) -> Optional[models.SAMLConnection]:
        r"""Update a SAML Connection

        Updates the SAML Connection whose ID matches the provided `id` in the path.

        :param saml_connection_id: The ID of the SAML Connection to update
        :param name: The name of the new SAML Connection
        :param domain: The domain to use for the new SAML Connection
        :param idp_entity_id: The entity id as provided by the IdP
        :param idp_sso_url: The SSO url as provided by the IdP
        :param idp_certificate: The x509 certificated as provided by the IdP
        :param idp_metadata_url: The URL which serves the IdP metadata. If present, it takes priority over the corresponding individual properties and replaces them
        :param idp_metadata: The XML content of the IdP metadata file. If present, it takes priority over the corresponding individual properties
        :param attribute_mapping: Define the atrtibute name mapping between Identity Provider and Clerk's user properties
        :param active: Activate or de-activate the SAML Connection
        :param sync_user_attributes: Controls whether to update the user's attributes in each sign-in
        :param allow_subdomains: Allow users with an email address subdomain to use this connection in order to authenticate
        :param allow_idp_initiated: Enable or deactivate IdP-initiated flows
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.UpdateSAMLConnectionRequest(
            saml_connection_id=saml_connection_id,
            request_body=models.UpdateSAMLConnectionRequestBody(
                name=name,
                domain=domain,
                idp_entity_id=idp_entity_id,
                idp_sso_url=idp_sso_url,
                idp_certificate=idp_certificate,
                idp_metadata_url=idp_metadata_url,
                idp_metadata=idp_metadata,
                attribute_mapping=utils.get_pydantic_model(
                    attribute_mapping,
                    OptionalNullable[models.UpdateSAMLConnectionAttributeMapping],
                ),
                active=active,
                sync_user_attributes=sync_user_attributes,
                allow_subdomains=allow_subdomains,
                allow_idp_initiated=allow_idp_initiated,
            ),
        )

        req = self.build_request(
            method="PATCH",
            path="/saml_connections/{saml_connection_id}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.request_body,
                False,
                False,
                "json",
                models.UpdateSAMLConnectionRequestBody,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                operation_id="UpdateSAMLConnection",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["402", "403", "404", "422", "4XX", "5XX"],
            retry_config=retry_config,
        )

        data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(http_res.text, Optional[models.SAMLConnection])
        if utils.match_response(
            http_res, ["402", "403", "404", "422"], "application/json"
        ):
            data = utils.unmarshal_json(http_res.text, models.ClerkErrorsError88Data)
            raise models.ClerkErrorsError88(data=data)
        if utils.match_response(http_res, ["4XX", "5XX"], "*"):
            raise models.SDKError(
                "API error occurred", http_res.status_code, http_res.text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        raise models.SDKError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res.text,
            http_res,
        )

    async def update_async(
        self,
        *,
        saml_connection_id: str,
        name: OptionalNullable[str] = UNSET,
        domain: OptionalNullable[str] = UNSET,
        idp_entity_id: OptionalNullable[str] = UNSET,
        idp_sso_url: OptionalNullable[str] = UNSET,
        idp_certificate: OptionalNullable[str] = UNSET,
        idp_metadata_url: OptionalNullable[str] = UNSET,
        idp_metadata: OptionalNullable[str] = UNSET,
        attribute_mapping: OptionalNullable[
            Union[
                models.UpdateSAMLConnectionAttributeMapping,
                models.UpdateSAMLConnectionAttributeMappingTypedDict,
            ]
        ] = UNSET,
        active: OptionalNullable[bool] = UNSET,
        sync_user_attributes: OptionalNullable[bool] = UNSET,
        allow_subdomains: OptionalNullable[bool] = UNSET,
        allow_idp_initiated: OptionalNullable[bool] = UNSET,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ) -> Optional[models.SAMLConnection]:
        r"""Update a SAML Connection

        Updates the SAML Connection whose ID matches the provided `id` in the path.

        :param saml_connection_id: The ID of the SAML Connection to update
        :param name: The name of the new SAML Connection
        :param domain: The domain to use for the new SAML Connection
        :param idp_entity_id: The entity id as provided by the IdP
        :param idp_sso_url: The SSO url as provided by the IdP
        :param idp_certificate: The x509 certificated as provided by the IdP
        :param idp_metadata_url: The URL which serves the IdP metadata. If present, it takes priority over the corresponding individual properties and replaces them
        :param idp_metadata: The XML content of the IdP metadata file. If present, it takes priority over the corresponding individual properties
        :param attribute_mapping: Define the atrtibute name mapping between Identity Provider and Clerk's user properties
        :param active: Activate or de-activate the SAML Connection
        :param sync_user_attributes: Controls whether to update the user's attributes in each sign-in
        :param allow_subdomains: Allow users with an email address subdomain to use this connection in order to authenticate
        :param allow_idp_initiated: Enable or deactivate IdP-initiated flows
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.UpdateSAMLConnectionRequest(
            saml_connection_id=saml_connection_id,
            request_body=models.UpdateSAMLConnectionRequestBody(
                name=name,
                domain=domain,
                idp_entity_id=idp_entity_id,
                idp_sso_url=idp_sso_url,
                idp_certificate=idp_certificate,
                idp_metadata_url=idp_metadata_url,
                idp_metadata=idp_metadata,
                attribute_mapping=utils.get_pydantic_model(
                    attribute_mapping,
                    OptionalNullable[models.UpdateSAMLConnectionAttributeMapping],
                ),
                active=active,
                sync_user_attributes=sync_user_attributes,
                allow_subdomains=allow_subdomains,
                allow_idp_initiated=allow_idp_initiated,
            ),
        )

        req = self.build_request_async(
            method="PATCH",
            path="/saml_connections/{saml_connection_id}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.request_body,
                False,
                False,
                "json",
                models.UpdateSAMLConnectionRequestBody,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                operation_id="UpdateSAMLConnection",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["402", "403", "404", "422", "4XX", "5XX"],
            retry_config=retry_config,
        )

        data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(http_res.text, Optional[models.SAMLConnection])
        if utils.match_response(
            http_res, ["402", "403", "404", "422"], "application/json"
        ):
            data = utils.unmarshal_json(http_res.text, models.ClerkErrorsError88Data)
            raise models.ClerkErrorsError88(data=data)
        if utils.match_response(http_res, ["4XX", "5XX"], "*"):
            raise models.SDKError(
                "API error occurred", http_res.status_code, http_res.text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        raise models.SDKError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res.text,
            http_res,
        )

    def delete(
        self,
        *,
        saml_connection_id: str,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ) -> Optional[models.DeletedObject]:
        r"""Delete a SAML Connection

        Deletes the SAML Connection whose ID matches the provided `id` in the path.

        :param saml_connection_id: The ID of the SAML Connection to delete
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.DeleteSAMLConnectionRequest(
            saml_connection_id=saml_connection_id,
        )

        req = self.build_request(
            method="DELETE",
            path="/saml_connections/{saml_connection_id}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                operation_id="DeleteSAMLConnection",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["402", "403", "404", "4XX", "5XX"],
            retry_config=retry_config,
        )

        data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(http_res.text, Optional[models.DeletedObject])
        if utils.match_response(http_res, ["402", "403", "404"], "application/json"):
            data = utils.unmarshal_json(http_res.text, models.ClerkErrorsError89Data)
            raise models.ClerkErrorsError89(data=data)
        if utils.match_response(http_res, ["4XX", "5XX"], "*"):
            raise models.SDKError(
                "API error occurred", http_res.status_code, http_res.text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        raise models.SDKError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res.text,
            http_res,
        )

    async def delete_async(
        self,
        *,
        saml_connection_id: str,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ) -> Optional[models.DeletedObject]:
        r"""Delete a SAML Connection

        Deletes the SAML Connection whose ID matches the provided `id` in the path.

        :param saml_connection_id: The ID of the SAML Connection to delete
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.DeleteSAMLConnectionRequest(
            saml_connection_id=saml_connection_id,
        )

        req = self.build_request_async(
            method="DELETE",
            path="/saml_connections/{saml_connection_id}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                operation_id="DeleteSAMLConnection",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["402", "403", "404", "4XX", "5XX"],
            retry_config=retry_config,
        )

        data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(http_res.text, Optional[models.DeletedObject])
        if utils.match_response(http_res, ["402", "403", "404"], "application/json"):
            data = utils.unmarshal_json(http_res.text, models.ClerkErrorsError89Data)
            raise models.ClerkErrorsError89(data=data)
        if utils.match_response(http_res, ["4XX", "5XX"], "*"):
            raise models.SDKError(
                "API error occurred", http_res.status_code, http_res.text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        raise models.SDKError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res.text,
            http_res,
        )
